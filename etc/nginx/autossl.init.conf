  lua_need_request_body on;
  lua_shared_dict ip 1m;
  lua_shared_dict acme 16m;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 2;

  init_by_lua_block {
    local domains = {}
    for _,k in os.getenv('AUTOSSL_DOMAINS',''):gmatch('[^,;:]+') do
      domains[k]=k
      domains[#rv+1]=k
    end

    local function rsakey(bits)
      local pkey = require"openssl.pkey"
      local rsa = pkey.new{ type = "RSA", bits = bits or 4096 }
      return rsa:toPEM('private')
    end
    local function file_write(p, data)
      if not data then return nil end
      local w = io.open(p, 'w')
      if w then w:write(data) end
      return p
    end
    local function file_read(f)
      f=f and type(f)=='string' and io.open(f, 'r')
      if not f then return nil end
      local rv = f:read("*a")
      f:close()
      return rv
    end
    local function file_exists(p)
      local fp = io.open(p, 'r')
      if fp then fp:close(); return p end
      return nil
    end

    local st = os.getenv('AUTOSSL_STAGING')
    local staging = (st ~= nil) and (string.len(st) > 0) and (st ~= "0") and (st ~= "false") and (not (not st))

    local expire_days = os.getenv('AUTOSSL_EXPIRE_DAYS', '365')
    local account_key = os.getenv('AUTOSSL_ACCOUNT_KEY')
    local account_dir = os.getenv('AUTOSSL_DIR', '/etc/keys')
    local account_file = account_dir..'/account.key'

    require("resty.acme.autossl").init({
      tos_accepted = true,
      renew_threshold = 7 * 86400,
      renew_check_interval = 12 * 3600,
      storage_adapter = "file",
      challenge_start_delay = 1,
      enabled_challenge_handlers = { 'http-01'},
      storage_config = {dir = account_dir},
      staging = ngx.var.staging,
      account_key_path = file_exists(account_file) or
        file_write(account_file, account_key or rsakey()),
      domain_whitelist = domains,
      account_email = string.format('root@%s', os.getenv('AUTOSSL_DOMAIN')
        or domains[1] or file_read(io.popen ("hostname")))
    })
  }
  init_worker_by_lua_block { require("resty.acme.autossl").init_worker() }
